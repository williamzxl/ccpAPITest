// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ForbidMemberSpeak.proto

package ForbidMemberSpeak

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ForbidMemberSpeakInner struct {
	Operator             *uint64  `protobuf:"varint,1,opt,name=operator" json:"operator,omitempty"`
	GroupId              *uint64  `protobuf:"varint,2,req,name=groupId" json:"groupId,omitempty"`
	Member               *string  `protobuf:"bytes,3,req,name=member" json:"member,omitempty"`
	ForbidState          *uint32  `protobuf:"varint,4,opt,name=forbidState" json:"forbidState,omitempty"`
	AllForbid            *uint32  `protobuf:"varint,5,opt,name=allForbid" json:"allForbid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForbidMemberSpeakInner) Reset()         { *m = ForbidMemberSpeakInner{} }
func (m *ForbidMemberSpeakInner) String() string { return proto.CompactTextString(m) }
func (*ForbidMemberSpeakInner) ProtoMessage()    {}
func (*ForbidMemberSpeakInner) Descriptor() ([]byte, []int) {
	return fileDescriptor_56e97689c80ca6fc, []int{0}
}

func (m *ForbidMemberSpeakInner) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForbidMemberSpeakInner.Unmarshal(m, b)
}
func (m *ForbidMemberSpeakInner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForbidMemberSpeakInner.Marshal(b, m, deterministic)
}
func (m *ForbidMemberSpeakInner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForbidMemberSpeakInner.Merge(m, src)
}
func (m *ForbidMemberSpeakInner) XXX_Size() int {
	return xxx_messageInfo_ForbidMemberSpeakInner.Size(m)
}
func (m *ForbidMemberSpeakInner) XXX_DiscardUnknown() {
	xxx_messageInfo_ForbidMemberSpeakInner.DiscardUnknown(m)
}

var xxx_messageInfo_ForbidMemberSpeakInner proto.InternalMessageInfo

func (m *ForbidMemberSpeakInner) GetOperator() uint64 {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return 0
}

func (m *ForbidMemberSpeakInner) GetGroupId() uint64 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *ForbidMemberSpeakInner) GetMember() string {
	if m != nil && m.Member != nil {
		return *m.Member
	}
	return ""
}

func (m *ForbidMemberSpeakInner) GetForbidState() uint32 {
	if m != nil && m.ForbidState != nil {
		return *m.ForbidState
	}
	return 0
}

func (m *ForbidMemberSpeakInner) GetAllForbid() uint32 {
	if m != nil && m.AllForbid != nil {
		return *m.AllForbid
	}
	return 0
}

func init() {
	proto.RegisterType((*ForbidMemberSpeakInner)(nil), "ForbidMemberSpeakInner")
}

func init() { proto.RegisterFile("ForbidMemberSpeak.proto", fileDescriptor_56e97689c80ca6fc) }

var fileDescriptor_56e97689c80ca6fc = []byte{
	// 158 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x77, 0xcb, 0x2f, 0x4a,
	0xca, 0x4c, 0xf1, 0x4d, 0xcd, 0x4d, 0x4a, 0x2d, 0x0a, 0x2e, 0x48, 0x4d, 0xcc, 0xd6, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x57, 0x5a, 0xc6, 0xc8, 0x25, 0x86, 0x21, 0xe7, 0x99, 0x97, 0x97, 0x5a, 0x24,
	0x24, 0xc5, 0xc5, 0x91, 0x5f, 0x90, 0x5a, 0x94, 0x58, 0x92, 0x5f, 0x24, 0xc1, 0xa8, 0xc0, 0xa8,
	0xc1, 0x12, 0x04, 0xe7, 0x0b, 0x49, 0x70, 0xb1, 0xa7, 0x17, 0xe5, 0x97, 0x16, 0x78, 0xa6, 0x48,
	0x30, 0x29, 0x30, 0x69, 0xb0, 0x04, 0xc1, 0xb8, 0x42, 0x62, 0x5c, 0x6c, 0xb9, 0x60, 0x93, 0x24,
	0x98, 0x15, 0x98, 0x34, 0x38, 0x83, 0xa0, 0x3c, 0x21, 0x05, 0x2e, 0xee, 0x34, 0xb0, 0x3d, 0xc1,
	0x25, 0x89, 0x25, 0xa9, 0x12, 0x2c, 0x0a, 0x8c, 0x1a, 0xbc, 0x41, 0xc8, 0x42, 0x42, 0x32, 0x5c,
	0x9c, 0x89, 0x39, 0x39, 0x10, 0xc7, 0x48, 0xb0, 0x82, 0xe5, 0x11, 0x02, 0x4e, 0x4c, 0x1e, 0xcc,
	0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x61, 0x2c, 0x57, 0xc6, 0x00, 0x00, 0x00,
}
